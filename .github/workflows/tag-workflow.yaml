name: Deploy Image RC to K8s
run-name: Deploy Image

on:
  push:
    tags:
      - '*'

jobs:
  deploy_when_git_tag_attached:

    name: Deploy Image RC Version when tag attached
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
      
      - name: echo hello
        run: echo "hello tag action"
      
      - name: Access K8s Cluster
        env: 
             KUBECTL_CONFIG_CONTENT: ${{ secrets.KUBE_CONFIG }}
        run: |
             mkdir -p ~/.kube
             echo "$KUBECTL_CONFIG_CONTENT" > ~/.kube/config
      
      - name: Get Release Version
        run: |
              version=$(jq -r '.version' package.json)
              echo "Package version is: $version"
              echo "release_version=$version" >> $GITHUB_ENV
      
      - name: Set output named RELEASE_VERSION
        id: release-version
        run: echo "RELEASE_VERSION=$release_version" >> "$GITHUB_OUTPUT" 


      - name: Set output New Image Tag (release version)
        id: image-rc-tag
        run:  |
              #----setup env
              image_with_rc_tag="${{ secrets.DOCKER_USERNAME }}/week-9-1021:${{ steps.release-version.outputs.RELEASE_VERSION }}" >> $GITHUB_ENV
              echo "image_with_rc_tag is: $image_with_rc_tag"
              #----setup output
              echo "IMAGE_RELEASE_TAG=$image_with_rc_tag" >> $GITHUB_OUTPUT
              echo "IMAGE_RELEASE_TAG is: '${{ steps.image-rc-tag.outputs.IMAGE_RELEASE_TAG }}'"
      

      - name: Log in to Docker Hub
        uses: docker/login-action@f4ef78c080cd8ba55a85445d5b36e214a81df20a
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Define Image New Version
        run: |
              echo "image_with_new_tag=${{ steps.image-rc-tag.outputs.IMAGE_RELEASE_TAG }}" >> $GITHUB_ENV
              echo "Image with Release is: $image_with_new_tag"

      - name: Update Image in Deployment K8s
        run: |
              # Update the K8s deployment file using yq
              yq -i '.spec.template.spec.containers[0].image=strenv(image_with_new_tag)' ./manifest/dev/deployment.yaml

      - name: Display yaml file
        run: cat ./manifest/dev/deployment.yaml

      - name: Deploy Image to K8s
        run: kubectl apply -f ./manifest/dev/deployment.yaml -n group-3-prod


      