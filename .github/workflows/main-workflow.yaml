name: Retag Image with Release Version
run-name: Build and Push Image with rc

on:

  push:
    branches: ["develop"]

jobs:
  update_tag_with_release_version:

    name: Update tag image with Release Version
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Get Release Version
        run: |
              version=$(jq -r '.version' package.json)
              echo "Package version is: $version"
              echo "release_version=$version" >> $GITHUB_ENV
      
      - name: Set output named RELEASE_VERSION
        id: release-version
        run: echo "RELEASE_VERSION=$release_version" >> "$GITHUB_OUTPUT" #${{ steps.release-version.outputs.RELEASE_VERSION }}

      
      - name: Get Image Name With Tag
        run:  |
              image_with_commit_tag=$(yq -r '.spec.template.spec.containers[0].image' ./manifest/dev/deployment.yaml)
              echo "Image is: $image_with_commit_tag"
      
      - name: Log in to Docker Hub
        uses: docker/login-action@f4ef78c080cd8ba55a85445d5b36e214a81df20a
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Run docker pull help
        run: docker pull --help


      # - name: Check Pull Request Approval
      #   run: |
      #         token=$GITHUB_TOKEN
      #         pr_number=$(jq --raw-output .pull_request.number "$GITHUB_EVENT_PATH")
      #         reviews=$(curl -sSL -H "Authorization: token $token" "https://api.github.com/repos/$GITHUB_REPOSITORY/pulls/$pr_number/reviews")
        
      #         if echo "$reviews" | jq -r '.[] | select(.state=="APPROVED")' > /dev/null; then
      #         echo "Pull request has been approved."
      #         else
      #         echo "Pull request has not been approved."
      #         exit 1

#have docker imagec(pull) > retag (docker tag)